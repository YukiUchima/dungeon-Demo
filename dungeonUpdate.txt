package package01;

import package02.monsters.Monster_HoopSnake;
import package02.monsters.SuperMonster;
import package03.SuperWeapon;
import package03.Weapon_Knife;
import package03.Weapon_LongSword;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Random;

public class Story {
    RoomGame game;
    UI ui;
    VisibilityManager vm;
    Player player = new Player();
    RandomEncounter randMonster = new RandomEncounter();

    int candle = 0;
    int trapDoorKey = 0;
    int gem = 0;
    int hiddenWpn = 0;
    int enteredWestRoom = 0;
    int enteredMainEntrance = 0;
    String saveLocation;
    String currentLocation;
    SuperMonster curMonster;

    //-----------------------Start of progressKey Vals-----------------------
    static int hasTalisman = 0;
    static int hasMap = 0;

    static int[] progressKey = new int[]{hasTalisman, hasMap};
    //We also need to include player.hp


    //-----------------------End of progressKey Vals-------------------------

    public Story(RoomGame g, UI userInterface, VisibilityManager vManager) {
        game = g;
        ui = userInterface;
        vm = vManager;
    }

    public void setLocation(String saveLoc) {
        saveLocation = saveLoc;
    }

    public void defaultSetup() {
        player.hp = 100;
        candle = 0;
        trapDoorKey = 0;
        gem = 0;
        hiddenWpn = 0;
        enteredWestRoom = 0;
        enteredMainEntrance = 0;
        currentLocation = "";

        ui.currentHealthLabel.setText("" + player.hp);
        ui.outputTextArea.setText("You shall find messages here to help you during your" +
                "\n\tventure." +
                "\n\nTo begin your journey, press start...");

        player.currentWeapon = new Weapon_Knife();
        ui.currentWeaponLabel.setText(player.currentWeapon.name);

        ui.northBtn.setText("Start");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "dungeonEntrance";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";

        ui.inventoryTitleLabel.setText("INVENTORY");
        ui.item1.setText("");
        ui.item2.setText("");
        ui.item3.setText("");
        ui.item4.setText("");
        ui.item5.setText("");
        ui.item6.setText("");
        ui.item7.setText("");
        ui.item8.setText("");
    }

    public static String createProgressKey() {
        String progressKeyString = "";
        for (int i = 0; i < progressKey.length ; ++i) {
            progressKeyString = progressKeyString + String.valueOf(progressKey[i]);
        }

        return progressKeyString;
    }

    public static void readProgressKey(String progressKeyString) {
        for (int i = 0; i < progressKeyString.length() ; ++i) {
            progressKey[i] = progressKeyString.charAt(i);
        }

        System.out.println(hasMap);
        System.out.println(hasTalisman);
    }

    public void selectPosition(String nextPosition) {
        switch (nextPosition) {
            //    WEST ROOM
            case "dungeonEntrance":
                dungeonEntrance();
                break;
            case "mainRoom":
                mainRoom();
                break;
            case "turnBack":
                turnBack();
                break;
            case "westRoomEncounter":
                currentLocation = "westRoom";
                monsterEncounter();
                break;
            case "midRoomEncounter":
                currentLocation = "midRoom";
                monsterEncounter();
                break;
            case "eastRoomEncounter":
                currentLocation = "eastRoom";
                monsterEncounter();
                break;
            case "table":
                westRoomTable();
                break;
            case "wardrobe":
                wardrobe();
                break;
            case "hidden":
                hidden();
                break;
            case "trapDoor":
                trapDoor();
                break;
            case "westUnderground":
                westUnderground();
                break;
            case "fightWestBoss":
                bossFight();
                break;
            case "playerAttack":
                playerAttack();
                break;
            case "monsterAttack":
                monsterAttack();
                break;
            case "speakMonster":
                speakMonster();
                break;
            case "correctRiddle":
                correctRiddle();
                break;
            case "wrongRiddle":
                wrongRiddle();
                break;
            case "run":
                System.out.println("You tried to run");
                break;
            case "lose":
                lose();
                break;
            case "exit":
                defaultSetup();
                vm.showTitleScreen();
                break;
            case "save":
                save();
                break;

//    MIDDLE DOOR ------------------------------------------------------------------------------------------ MIDDLE DOOR


//    RIGHT DOOR -------------------------------------------------------------------------------------------- RIGHT DOOR
            case "rightDoor":
                westRoom();
                break;
            case "rightTable":
                rightTable();
                break;
            case "rightTableNoMap":
                rightTableNoMap();
                break;
            case "receiveMap":
                receiveMap();
                break;
            default:
                break;
        }
    }

    //    Locations -- Text Area Story Line ---------------------------------------------------------------------------
    public void dungeonEntrance() {
        ui.mainTextArea.setText("You slowly realize the day has gone and it is dark as you approach the door. " +
                "\n\nAround the door you see brush and rocks, the path ends here, with trees to the sides of you. " +
                "\n\nOnly way forward is through this heavy steel door, between the ominous, lowly lit torches");

        ui.outputTextArea.setText("");

        ui.northBtn.setText("North");
        ui.eastBtn.setText("");
        ui.southBtn.setText("South");
        ui.westBtn.setText("");

        game.nextPosition1 = "mainRoom";
        game.nextPosition2 = "";
        game.nextPosition3 = "turnBack";
        game.nextPosition4 = "";
    }

    public void mainRoom() {
        if (enteredMainEntrance < 1) {
            ui.mainTextArea.setText("You Entered into the main dungeon room.\nYou see three doors ahead of you...");
        } else {
            ui.mainTextArea.setText("You returned to the main dungeon room\nWhich way do you want to go?...");
        }
        enteredMainEntrance = 1;



        ui.outputTextArea.setText("You can choose which door to enter or exit.");

        ui.northBtn.setText("North");
        ui.eastBtn.setText("East");
        ui.southBtn.setText("South");
        ui.westBtn.setText("West");

        game.nextPosition1 = "midRoomEncounter";
        game.nextPosition2 = "eastRoomEncounter";
        game.nextPosition3 = "exit";
        game.nextPosition4 = "westRoomEncounter";
    }


    public void turnBack() {
        ui.mainTextArea.setText("You are deciding to abandon the story... would you like to save?");

        ui.northBtn.setText("Yes");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "save";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";

    }

//    WEST DOOR         LEFT DOOR                  LEFT DOOR                  LEFT DOOR         ------------------------
//    WEST DOOR         LEFT DOOR                  LEFT DOOR                  LEFT DOOR         ------------------------
    public void westRoom() {
        if (enteredWestRoom < 1) {
            ui.mainTextArea.setText("You decide to walk cautiously to the left door and look around you, where you" +
                    " see a note on a table to the west. You also see a wardrobe to the east. North of you is a " +
                    "trapdoor before you reach the north wall.");
            enteredWestRoom = 1;
        } else {
            ui.mainTextArea.setText("You have returned to the west room.");
        }
        ui.outputTextArea.setText("You can explore this room.");

        ui.northBtn.setText("North");
        ui.eastBtn.setText("East");
        ui.southBtn.setText("South");
        ui.westBtn.setText("West");

        game.nextPosition1 = "trapDoor";
        game.nextPosition2 = "wardrobe";
        game.nextPosition3 = "mainRoom";
        game.nextPosition4 = "table";
    }

    public void westRoomTable() {
        if (candle < 1) {
            ui.mainTextArea.setText("As you reached the table, you see a note... You reach for the note and " +
                    "read the following:\n\n\" One who wishes to complete his quest must first face the " +
                    "\n darkness below. Take the candle on the table to move forth in your journey...\"");

            ui.outputTextArea.setText("You now have a candle!");
            candle = 1;
            ui.item1.setText("Candle");
        } else {
            ui.mainTextArea.setText("You find the note again on the table. It reads:" +
                    "\n\n\" One who wishes to complete his quest must first face the darkness below." +
                    " Take the candle on the table to move forth in your journey...\"");

            ui.outputTextArea.setText("");
        }

        ui.northBtn.setText("North");
        ui.eastBtn.setText("East");
        ui.southBtn.setText("South");
        ui.westBtn.setText("");

        game.nextPosition1 = "trapDoor";
        game.nextPosition2 = "wardrobe";
        game.nextPosition3 = "mainRoom";
        game.nextPosition4 = "";
    }

    public void wardrobe() {
        if (trapDoorKey < 1) {
            ui.mainTextArea.setText("You reached the wardrobe in wander of what you will find. You notice a metal key...");

            ui.outputTextArea.setText("You received the key!");
            trapDoorKey = 1;

            ui.northBtn.setText("Trapdoor");
            ui.eastBtn.setText("Compartment");
            ui.southBtn.setText("Leave");
            ui.westBtn.setText("");

            game.nextPosition1 = "trapDoor";
            game.nextPosition2 = "hidden";
            game.nextPosition3 = "westRoom";
            game.nextPosition4 = "";

        } else if (hiddenWpn < 1) {
            ui.mainTextArea.setText("You reached the wardrobe again.\n" +
                    "There is not much left to find...");

            ui.northBtn.setText("Trapdoor");
            ui.eastBtn.setText("Hidden");
            ui.southBtn.setText("Leave");
            ui.westBtn.setText("");

            game.nextPosition1 = "trapDoor";
            game.nextPosition2 = "hidden";
            game.nextPosition3 = "westRoom";
            game.nextPosition4 = "";
        } else {
            ui.mainTextArea.setText("There is nothing else to find here.");
            ui.northBtn.setText("Trapdoor");
            ui.eastBtn.setText("Leave");
            ui.southBtn.setText("");
            ui.westBtn.setText("");

            game.nextPosition1 = "trapDoor";
            game.nextPosition2 = "mainRoom";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        }
    }

    public void hidden() {
        ui.mainTextArea.setText("Your curiosity has rewarded you this time... You have " +
                "found a new weapon for your journey.");

        hiddenWpn = 1;

        ui.outputTextArea.setText("You obtained a long sword!");
        player.currentWeapon = new Weapon_LongSword();
        ui.currentWeaponLabel.setText(player.currentWeapon.name);

        ui.northBtn.setText("Trapdoor");
        ui.eastBtn.setText("Table");
        ui.southBtn.setText("Leave");
        ui.southBtn.setText("");

        game.nextPosition1 = "trapDoor";
        game.nextPosition2 = "table";
        game.nextPosition3 = "leave";
        game.nextPosition4 = "";
    }

    public void trapDoor() {
        if (trapDoorKey > 0 && candle > 0) {
            ui.mainTextArea.setText("You used the key you found in the wardrobe. You unlocked the trapdoor, will you open it?");
            ui.outputTextArea.setText("You can continue your journey below...");

            ui.northBtn.setText("Trapdoor");
            ui.eastBtn.setText("Table ");
            ui.southBtn.setText("Wardrobe");
            ui.westBtn.setText("Leave");

            game.nextPosition1 = "westUnderground";
            game.nextPosition2 = "table";
            game.nextPosition3 = "wardrobe";
            game.nextPosition4 = "mainRoom";

        } else if (trapDoorKey < 1) {
            ui.mainTextArea.setText("You find that the trapdoor is locked...\n");
            ui.outputTextArea.setText("Hint: You may need to search...");
            ui.northBtn.setText("Table");
            ui.eastBtn.setText("Wardrobe");
            ui.southBtn.setText("Leave");
            ui.westBtn.setText("");

            game.nextPosition1 = "table";
            game.nextPosition2 = "wardrobe";
            game.nextPosition3 = "mainRoom";
            game.nextPosition4 = "";
        }else{
            ui.mainTextArea.setText("It will be too dark to enter...\n");
            ui.outputTextArea.setText("Hint: You may need to search...");
            ui.northBtn.setText("Table");
            ui.eastBtn.setText("Wardrobe");
            ui.southBtn.setText("Leave");
            ui.westBtn.setText("");

            game.nextPosition1 = "table";
            game.nextPosition2 = "wardrobe";
            game.nextPosition3 = "mainRoom";
            game.nextPosition4 = "";
        }
    }

    public void westUnderground() {
        ui.mainTextArea.setText("You walked down with the sound of stone steps of a cold chamber. You approach " +
                "the end of this stairway to a large open, chamber.\n\nTroll: \"Who disturbs me?!\"");

        ui.outputTextArea.setText("You have encountered a beast!");
        trapDoorKey = 1;

        ui.northBtn.setText("Fight");
        ui.eastBtn.setText("Speak");
        ui.southBtn.setText("");
        ui.westBtn.setText("Run");

        game.nextPosition1 = "fightWestBoss";
        game.nextPosition2 = "speakMonster";
        game.nextPosition3 = "";
        game.nextPosition4 = "run";
    }

    public void speakMonster() {
        ui.mainTextArea.setText("The monster is taken aback you are speaking to them...\n\n" +
                "Monster: \"Solve my riddle and I shall bestow upon thee a gift.\"" +
                "\n\n    What exists while hidden, but ceases to exist when revealed?");

        ui.outputTextArea.setText("Hint: Solve the riddle to face the consequences...");
        ui.northBtn.setText("Thoughts");
        ui.eastBtn.setText("Promises");
        ui.southBtn.setText("Secrets");
        ui.westBtn.setText("RUN!");

        game.nextPosition1 = "wrongRiddle";
        game.nextPosition2 = "wrongRiddle";
        game.nextPosition3 = "correctRiddle";
        game.nextPosition4 = "westRoom";
    }

    public void wrongRiddle(){
        ui.mainTextArea.setText("You failed to answer the riddle correctly. The monster refuses to cooperate...");

        ui.outputTextArea.setText("Hint: How can you obtain what you need?");
        ui.northBtn.setText("Fight");
        ui.eastBtn.setText("Escape!");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "fightWestBoss";
        game.nextPosition2 = "run";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }

    public void correctRiddle(){
        ui.mainTextArea.setText("You solved the monster's riddle correctly. \n\n" +
                "Monster: \"Take this gem as a reward. Good luck on your quest\"");

        ui.outputTextArea.setText("You received a large Gem!");
        ui.item3.setText("Gem");
        gem = 1;


        ui.northBtn.setText("Return");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "mainRoom";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }


    //    MIDDLE DOOR -----------------------------------------------------------------------------------------MIDDLE
    public void midRoom() {
        System.out.println("You entered the midroom");
}


// EAST ROOM -------------------MITSUAKI ----------------------------------------------------------------------EAST ROOM
// EAST ROOM -------------------MITSUAKI ----------------------------------------------------------------------EAST ROOM


    public void eastRoom() {
        if (hasTalisman != 1) {
            ui.mainTextArea.setText("As you push open the right door... \n" +
                    "You find that it's too dark to make out anything. May be best to turn back around and return once you found a light source.\n");

            ui.northBtn.setText("");
            ui.eastBtn.setText("");
            ui.southBtn.setText("South");
            ui.westBtn.setText("");

            game.nextPosition1 = "";
            game.nextPosition2 = "";
            game.nextPosition3 = "mainRoom";
            game.nextPosition4 = "";
        } else {
            ui.mainTextArea.setText("As you push open the right door... \n" +
                    "The talisman in your bag shines brightly and illumnates the space around you.\n" +
                    "As you take out the talisman out of your bag, a table with a large map laid atop of it comes into view.\n" );

            ui.outputTextArea.setText("Head North to interact with the table.");

            ui.northBtn.setText("North");
            ui.eastBtn.setText("");
            ui.southBtn.setText("South");
            ui.westBtn.setText("");

            game.nextPosition1 = "rightTable";
            game.nextPosition2 = "";
            game.nextPosition3 = "mainRoom";
            game.nextPosition4 = "";

        }
    }

    public void rightTable() {
        if (hasMap != 1) {
            ui.mainTextArea.setText("You decide to approach the old dusty table in front of you...\n" +
                    "As you step closer, you begin to make out the drawings on the map. This is a map of a huge lake!");

            ui.outputTextArea.setText("Do you wish to take the map?");

            ui.northBtn.setText("");
            ui.eastBtn.setText("No");
            ui.southBtn.setText("");
            ui.westBtn.setText("Yes");

            game.nextPosition1 = "";
            game.nextPosition2 = "rightTableNoMap";
            game.nextPosition3 = "";
            game.nextPosition4 = "receiveMap";
        } else {
            ui.mainTextArea.setText("This is where you found the map to the lake.");

            ui.outputTextArea.setText("Click South to head back.");

            ui.northBtn.setText("");
            ui.eastBtn.setText("");
            ui.southBtn.setText("South");
            ui.westBtn.setText("");

            game.nextPosition1 = "";
            game.nextPosition2 = "";
            game.nextPosition3 = "rightDoor";
            game.nextPosition4 = "";
        }
    }

    public void rightTableNoMap() {
        ui.outputTextArea.setText("You decide to not take the map.");

        ui.northBtn.setText(">");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "rightDoor";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }

    public void receiveMap() {
        ui.outputTextArea.setText("You have received a map of the 'Secret Lake'");

        hasMap = 1;
        ui.item4.setText("Map");

        ui.northBtn.setText(">");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "rightDoor";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }


//    FIGHT SIMULATION -------------------------------------------------------------------------------------------------
//    FIGHT SIMULATION -------------------------------------------------------------------------------------------------

    public void bossFight() {
        ui.mainTextArea.setText(curMonster.getName() + "(HP): " + "\n\nWhat will you do?");
        gem = 1;

        ui.outputTextArea.setText("");

        ui.northBtn.setText("Attack");
        ui.eastBtn.setText("Run");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "playerAttack";
        game.nextPosition2 = "run";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }

    public void monsterEncounter() {

        if (randMonster.monsterSpawned()) {
            curMonster = randMonster.monster();

            ui.mainTextArea.setText(curMonster.getName() + "(HP: " + curMonster.getHealth() +") appeared!" +
                    "\n\nWhat will you do?");

            ui.outputTextArea.setText("You can choose to attack or run...");

            ui.northBtn.setText("Attack");
            ui.eastBtn.setText("Run");
            ui.southBtn.setText("");
            ui.westBtn.setText("");

            game.nextPosition1 = "playerAttack";
            game.nextPosition2 = "run";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        }else{
            switch (currentLocation){
                case "westRoom":
                    westRoom();
                    break;
                case "midRoom":
                    midRoom();
                    break;
                case "eastRoom":
                    eastRoom();
                    break;
                default:
                    mainRoom();
                    break;
            }
        }

    }

    public void monsterAttack(){
        System.out.println("The Monster Attacked!");
        int monsterDamage = new java.util.Random().nextInt(curMonster.attack());
        ui.mainTextArea.setText(curMonster.getName() + " attacked:  " + monsterDamage + " damage was inflicted!");
        player.hp -= monsterDamage;
        if(player.hp < 0){
            player.hp = 0;
        }

        ui.currentHealthLabel.setText("" + player.hp);
        ui.northBtn.setText(">");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        if(player.hp !=0) {
            game.nextPosition1 = "playerAttack";
            game.nextPosition2 = "";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        }else{
            game.nextPosition1 = "lose";
            game.nextPosition2 = "";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        }

    }

    public void playerAttack(){
        System.out.println("You attacked the monster with your " + player.currentWeapon.name + "!");
        int playerDamage = new java.util.Random().nextInt(player.currentWeapon.damage);
        if(playerDamage > 0) {
            curMonster.hit(playerDamage);
            ui.mainTextArea.setText("You attacked the monster with your " + player.currentWeapon.name + " and inflicted " + playerDamage + " damage!");
        }else{
            ui.mainTextArea.setText("You tried to attack with your " + player.currentWeapon.name + " but missed!");
        }

        ui.outputTextArea.setText(curMonster.getName() + " health: " + curMonster.getHealth() +
                "\n\n");
        ui.northBtn.setText(">Continue");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        if (curMonster.getHealth() > 0) {
            game.nextPosition1 = "monsterAttack";
            game.nextPosition2 = "";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        } else {
            randMonster.monsterSetup();
            game.nextPosition1 = currentLocation;
            game.nextPosition2 = "";
            game.nextPosition3 = "";
            game.nextPosition4 = "";
        }
    }

    public void save() {
        System.out.println("Game saved...");

        ui.outputTextArea.setText("Game has been saved...");

        ui.northBtn.setText("Main Menu");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "exit";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }

    public void lose() {
        ui.mainTextArea.setText("You lost the battle and must start over...");
        ui.northBtn.setText(">");
        ui.eastBtn.setText("");
        ui.southBtn.setText("");
        ui.westBtn.setText("");

        game.nextPosition1 = "exit";
        game.nextPosition2 = "";
        game.nextPosition3 = "";
        game.nextPosition4 = "";
    }

    public static void main(String [] args) {
        String progressKey = "30";

        readProgressKey(progressKey);
    }
}



//Frame LOCATIONS
//  Front entrance; main room
//      >LEFT door
//          > search room; weapon, note, key, cellar
//              >   Enter cellar; BOSS
//                    >Boss fight, solve riddle, retreat
//                      Fight; win, lose > retrieve KEY ITEM / lose game
//                      Riddle: win, lose > retrieve weapon and key item / fight or leave
//
//      >Middle
//      >Right
//  Loc: front of entrance
//      open door, turn back
//  Loc: main room
//      left door, middle door, right door,

//      loc: left room